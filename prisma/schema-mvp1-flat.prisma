// MVP1: FLAT CONTACT MODEL
// Everything on Contact, no junction tables

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Contact {
  id String @id @default(cuid())
  
  // ============================================
  // PERSONHOOD (Universal, never changes)
  // ============================================
  firstName String
  lastName  String
  fullName  String?
  email     String  @unique
  phone     String?
  goesBy    String?
  
  // Address
  street   String?
  city     String?
  state    String?
  zip      String?
  
  // Family
  birthday     String?
  married      Boolean @default(false)
  spouseName   String?
  numberOfKids Int     @default(0)
  
  // Work
  employer String?
  
  // ============================================
  // ORG RELATIONSHIP (Simple foreign key)
  // ============================================
  orgId     String?
  org       Organization? @relation(fields: [orgId], references: [id])
  
  isOrgMember Boolean @default(false)  // Flag: is this person a "member"?
  
  // Org-member fields (only used if isOrgMember = true)
  yearsWithOrganization Int?
  leadershipRole        String?
  orgNotes              String?
  chapterResponsibleFor String?
  tags                  String[] @default([])
  
  // Engagement (1-4 scale)
  engagementValue Int? // 1=undetermined, 2=low, 3=medium, 4=high
  
  // ============================================
  // EVENT RELATIONSHIP (Simple foreign key)
  // ============================================
  eventId      String?
  event        Event? @relation(fields: [eventId], references: [id])
  
  // Event-specific fields (for CURRENT event only)
  currentStage String?   // "aware", "invited", "rsvped", "paid", etc.
  audienceType String?   // "org_members", "prospects", "donors"
  attended     Boolean   @default(false)
  amountPaid   Float     @default(0)
  ticketType   String?
  
  // Party details
  spouseOrOther  String? // "solo", "spouse", "other"
  howManyInParty Int?
  
  // ============================================
  // METADATA
  // ============================================
  firebaseId String? @unique  // For login
  photoURL   String?
  role       String?          // System role
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([email])
  @@index([orgId])
  @@index([eventId])
  @@index([firebaseId])
  @@index([orgId, isOrgMember])  // Fast org member queries
  @@index([eventId, currentStage])  // Fast event attendee queries
}

model Organization {
  id   String @id @default(cuid())
  name String
  slug String @unique
  
  contacts Contact[]
  events   Event[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id     String @id @default(cuid())
  name   String
  slug   String?
  date   DateTime?
  status String @default("upcoming")
  
  orgId String
  org   Organization @relation(fields: [orgId], references: [id])
  
  contacts Contact[]  // All people registered for THIS event
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([orgId])
  @@index([status])
}

// Other tables (campaigns, forms, etc.) stay the same...

