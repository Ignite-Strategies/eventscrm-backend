generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Container {
  id      String  @id @default(cuid())
  name    String
  slug    String  @unique
  description String?

  // Reverse relations
  organizations Organization[]
  admins        Admin[]
  youtubeChannels YouTubeChannel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id      String  @id @default(cuid())
  name    String
  slug    String  @unique
  mission String?
  website String?

  // üîó Container link
  containerId String?
  container   Container? @relation(fields: [containerId], references: [id], onDelete: Cascade)

  x         String?
  instagram String?
  facebook  String?
  linkedin  String?

  street String?
  city   String?
  state  String?
  zip    String?

  pipelineDefaults String[] @default(["in_funnel", "general_awareness", "personal_invite", "expressed_interest", "rsvped", "thanked", "paid", "thanked_paid", "attended", "followed_up"])
  audienceDefaults String[] @default(["org_members", "friends_family", "landing_page_public", "community_partners", "cold_outreach"])

  googleAdsConfig String? // JSON: { refreshToken, customerId, connectedAt }
  metaConfig      String? // JSON: { accessToken, pageId, connectedAt }
  youtubeConfig   String? // JSON: { accessToken, refreshToken, channelId, connectedAt }

  // ‚úÖ NEW: Direct relations to Contact
  contacts        Contact[]
  youtubeChannels YouTubeChannel[]
  
  // Reverse relation - contacts where this org is the primary
  primaryContacts Contact[] @relation("OrgPrimaryContact")
  
  // ‚ö†Ô∏è LEGACY (to be removed)
  supporters      Supporter[]
  familyProspects FamilyProspect[]
  
  // üó∫Ô∏è NEW: Member journey tracking
  memberJourneys  MemberJourney[]
  
  events          Event[]
  templates       Template[]
  contactLists    ContactList[]
  admins          Admin[]
  campaigns       Campaign[]
  adCampaigns     AdCampaign[]
  personas        Persona[]
  googleAdAccounts GoogleAdAccount[]
  googleAdCampaigns GoogleAdCampaign[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id String @id @default(cuid())

  // PROSPECT TRACKING (before org membership)
  prospectId       String?   @unique  // Generated if no orgId (pre-conversion)
  becameProspectAt DateTime?          // When prospect record created
  
  // PERSONHOOD - ONLY EMAIL IS REQUIRED!
  firstName String?
  lastName  String?
  email     String  @unique  // üî• ONLY REQUIRED FIELD!
  phone     String?
  goesBy    String?
  street    String?
  city      String?
  state     String?
  zip       String?
  birthday  String?
  married   Boolean?
  spouseName String?
  numberOfKids Int?
  employer  String?

  // ORG STUFF
  chapterResponsibleFor String?
  yearsWithOrganization Int?
  leadershipRole        String?
  engagementValue       Int?
  orgTags               String[] @default([])
  originStory           String?  // How they got involved with THIS org
  notes                 String?  // General notes about this contact
  tags                  String?  // Comma-separated tags
  
  // FOREIGN KEYS (that's it!)
  orgId      String?
  org        Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade)
  
  contactListId String?
  contactList   ContactList? @relation(fields: [contactListId], references: [id], onDelete: SetNull)
  
  // Reverse relation - orgs where this contact is the primary
  ownedOrgs Organization[] @relation("OrgPrimaryContact")
  
  containerId String?
  // container   Container? @relation(fields: [containerId], references: [id], onDelete: Cascade)
  
  // Reverse relation - containers where this contact is the primary
  // ownedContainers Container[] @relation("ContainerPrimaryContact")
  
  eventId    String?
  event      Event? @relation(fields: [eventId], references: [id], onDelete: SetNull)
  
  // Reverse relation - events where this contact is the primary
  ownedEvents Event[] @relation("EventPrimaryContact")
  
  // TARGETING
  audienceType String?
  currentStage String?
  
  // EVENT DETAILS - ALL OPTIONAL!
  attended     Boolean?
  amountPaid   Float?
  spouseOrOther String?
  howManyInParty Int?
  ticketType   String?  // Type of ticket/registration
  
  // OTHER
  sequenceContacts SequenceContact[]
  emailEvents      EmailEvent[]
  memberJourneys   MemberJourney[]  // üó∫Ô∏è Member journey tracking

  firebaseId String? @unique
  photoURL   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([orgId])
  @@index([eventId])
  @@index([firebaseId])
  @@index([prospectId])
  @@index([eventId, audienceType, currentStage])
}

model Engagement {
  id    String @id @default(cuid())
  value Int    @unique // 1=undetermined, 2=low, 3=medium, 4=high
  
  // DELETED - orgMembers relation (OrgMember model removed)
  
  createdAt DateTime @default(now())
  
  @@index([value])
}

model LikelihoodToAttend {
  id    String @id @default(cuid())
  value Int    @unique // 1=high, 2=medium, 3=low, 4=support_from_afar
  
  // DELETED - eventAttendees relation (EventAttendee model removed)
  
  createdAt DateTime @default(now())
  
  @@index([value])
}

model LeadershipRole {
  id    String @id @default(cuid())
  value Int    @unique // 1=none, 2=project_lead, 3=committee, 4=board
  name  String        // "None", "Project Lead", "Committee", "Board"
  
  // TODO: Future migration - add leadershipRoleId to OrgMember and remove leadershipRole string
  // orgMembers OrgMember[]
  
  createdAt DateTime @default(now())
  
  @@index([value])
}


// DELETED - Legacy OrgMember model (Contact-first architecture now)
// Use Contact.orgId to determine org membership
// Use OrgMemberJourney (below) for journey stage tracking

// üó∫Ô∏è MEMBER JOURNEY - 6 stages (3 active, 3 future)
enum JourneyStage {
  UNAWARE      // üëÄ (Future: Ad response tracking)
  CURIOUS      // ü§î (Future: Site visits, link clicks)
  ACTIVATED    // ‚ö° ACTIVE: Attending event (has eventId + attended = true)
  ENGAGED      // üî• (Future: Multiple events, 2+ attendance)
  CHAMPION     // üëë ACTIVE: Leader, brought friend, or donated
  ALUMNI       // üí§ (Future: 90+ days no activity)
}

model MemberJourney {
  id             String       @id @default(cuid())
  contactId      String
  contact        Contact      @relation(fields: [contactId], references: [id], onDelete: Cascade)
  orgId          String
  org            Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  
  journeyStage   JourneyStage @default(UNAWARE)
  
  // Tracking
  enteredStageAt DateTime     @default(now())
  lastActivityAt DateTime     @default(now())
  
  // Metadata
  notes          String?
  tags           String[]     @default([])
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  @@unique([contactId, orgId])  // One journey per contact per org
  @@index([orgId, journeyStage])
  @@index([contactId])
  @@index([lastActivityAt])
}

model Supporter {
  id    String       @id @default(cuid())
  orgId String
  org   Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  firstName String
  goesBy    String?
  lastName  String
  email     String?
  phone     String?

  street String?
  city   String?
  state  String?
  zip    String?

  employer              String?
  yearsWithOrganization Int?

  categoryOfEngagement String @default("medium")

  birthday     String?
  married      Boolean @default(false)
  spouseName   String?
  numberOfKids Int     @default(0)

  originStory String?
  notes       String?

  tags            SupporterTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orgId, email])
  @@index([orgId])
}

model SupporterTag {
  id          String    @id @default(cuid())
  supporterId String
  supporter   Supporter @relation(fields: [supporterId], references: [id], onDelete: Cascade)
  name        String
  value       String
  addedBy     String
  addedAt     DateTime  @default(now())

  @@index([supporterId])
}

model Event {
  id          String       @id @default(cuid())
  orgId       String
  org         Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  name        String
  slug        String
  description String?
  date        String?
  time        String?

  status String @default("upcoming")

  eventVenueName String?
  eventStreet    String?
  eventCity      String?
  eventState     String?
  eventZip       String?

  hasTickets Boolean @default(false)
  ticketCost Float   @default(0)

  fundraisingGoal    Float @default(0)
  additionalExpenses Float @default(0)

  pipelines String[]

  rsvpTriggers          String[] @default(["form_rsvp", "button_click"])
  paidTriggers          String[] @default(["stripe_webhook"])
  minEngagement         Int      @default(3)
  championTags          String[] @default(["role:ao_q", "role:influencer", "shared_media"])
  manualOverrideAllowed Boolean  @default(true)

  totalFundraise Float @default(0)
  ticketTarget   Int   @default(0)
  costs          Float @default(0)

  membersConversionRate Float @default(0.25)
  membersTargetCount    Int   @default(0)
  friendsConversionRate Float @default(0.15)
  friendsTargetCount    Int   @default(0)
  adsConversionRate     Float @default(0.05)
  adsTargetCount        Int   @default(0)
  totalOutreachTarget   Int   @default(0)

  // ‚úÖ NEW: Direct relation to Contact
  contacts        Contact[]
  
  // Reverse relation - contacts where this event is the primary
  primaryContacts Contact[] @relation("EventPrimaryContact")
  
  // ‚ö†Ô∏è DELETED - Legacy attendees (Contact-first now)
  // Use Contact.eventId to query event attendees
  
  tasks           EventTask[]
  publicForms     PublicForm[]
  eventForms      EventForm[]
  admins          Admin[]
  engagementActions EngagementAction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orgId, slug])
  @@index([orgId])
}

model PublicForm {
  id      String @id @default(cuid())
  orgId   String
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  slug        String  @unique
  title       String
  description String?

  collectFirstName Boolean @default(true)
  collectLastName  Boolean @default(true)
  collectEmail     Boolean @default(true)
  collectPhone     Boolean @default(true)

  audienceType String
  targetStage  String

  fields Json?

  eventForms     EventForm[]
  // DELETED - eventAttendees relation (EventAttendee model removed)

  isActive        Boolean @default(true)
  submissionCount Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@index([eventId])
  @@index([orgId])
  @@index([audienceType])
}

model EventForm {
  id           String     @id @default(cuid())
  publicFormId String
  publicForm   PublicForm @relation(fields: [publicFormId], references: [id], onDelete: Cascade)
  orgId        String
  eventId      String
  event        Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)

  internalName    String
  internalPurpose String?

  styling Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([publicFormId])
  @@index([eventId])
  @@index([orgId])
}

model Admin {
  id        String        @id @default(cuid())
  
  // üî• UNIVERSAL PERSONHOOD (flattened from AdminProfile)
  email     String?
  firstName String?
  lastName  String?
  phone     String?
  photoURL  String?
  
  // CONTEXT LINKS
  containerId String?
  container   Container? @relation(fields: [containerId], references: [id], onDelete: Cascade)
  orgId       String?
  org         Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade)
  eventId     String?
  event       Event?        @relation(fields: [eventId], references: [id], onDelete: Cascade)

  firebaseId String? @unique

  // ROLE & STATUS
  role        String
  permissions Json?
  status      String @default("active") // active, deactivated, suspended

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // File uploads
  attachments CampaignAttachment[]

  @@unique([orgId, eventId])
  @@index([orgId])
  @@index([eventId])
  @@index([firebaseId])
  @@index([status])
  @@index([email])
}

// DELETED: AdminProfile - Merged into Admin model (personhood fields are now direct on Admin)

// DELETED - Legacy EventAttendee model (Contact-first architecture now)
// All fields moved to Contact model directly
// Contact.eventId determines event relationship
// Contact.currentStage tracks event funnel position

model FamilyProspect {
  id    String       @id @default(cuid())
  orgId String
  org   Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  firstName String
  goesBy    String?
  lastName  String
  email     String?
  phone     String?

  street String?
  city   String?
  state  String?
  zip    String?

  relationshipToMember String?
  howDidYouMeet        String?
  eventInterest        String?

  birthday     String?
  married      Boolean @default(false)
  spouseName   String?
  numberOfKids Int     @default(0)

  originStory String?
  notes       String?

  tags FamilyProspectTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orgId, email])
  @@index([orgId])
}

model FamilyProspectTag {
  id         String         @id @default(cuid())
  prospectId String
  prospect   FamilyProspect @relation(fields: [prospectId], references: [id], onDelete: Cascade)
  name       String
  value      String
  addedBy    String
  addedAt    DateTime       @default(now())

  @@index([prospectId])
}

model Template {
  id          String       @id @default(cuid())
  orgId       String
  org         Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  name        String
  description String?
  subject     String
  body        String
  type        String       @default("email")
  variables   Json         @default("[]")
  usageCount  Int          @default(0)
  lastUsed    DateTime?
  isActive    Boolean      @default(true)
  createdBy   String?

  sequences Sequence[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orgId])
}

model ContactList {
  id          String       @id @default(cuid())
  orgId       String
  org         Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  name        String
  description String?
  type        String

  eventId      String?
  audienceType String?
  stages       String[]

  tagFilters Json?

  filters Json?

  totalContacts Int       @default(0)
  lastUpdated   DateTime  @default(now())
  usageCount    Int       @default(0)
  lastUsed      DateTime?
  isActive      Boolean   @default(true)
  createdBy     String?
  tags          String[]

  contacts  Contact[]
  campaigns Campaign[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orgId, name])
  @@index([orgId])
}

model Campaign {
  id    String       @id @default(cuid())
  orgId String
  org   Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  name        String
  description String?

  contactListId String?
  contactList   ContactList? @relation(fields: [contactListId], references: [id])

  // Email content
  subject String?
  body    String?

  status String @default("draft")

  sequences Sequence[]
  attachments CampaignAttachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orgId, name])
  @@index([orgId])
  @@index([status])
}

model CampaignAttachment {
  id          String   @id @default(cuid())
  campaignId  String
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  adminId     String?
  admin       Admin?   @relation(fields: [adminId], references: [id])
  
  filename    String   // Stored filename (with timestamp)
  originalName String  // Original filename from upload
  mimeType    String   // MIME type of the file
  filePath    String   // Full path to the file on disk
  fileSize    Int      // File size in bytes
  
  uploadedAt  DateTime @default(now())
  
  @@index([campaignId])
  @@index([adminId])
}

model Sequence {
  id         String   @id @default(cuid())
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  name    String
  subject String
  html    String

  templateId String?
  template   Template? @relation(fields: [templateId], references: [id])

  delayDays Int @default(0)
  order     Int

  status    String    @default("draft")
  sentAt    DateTime?
  totalSent Int       @default(0)

  sequenceContacts SequenceContact[]
  emailEvents      EmailEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([campaignId, name])
  @@index([campaignId, order])
  @@index([status])
}

model SequenceContact {
  id         String   @id @default(cuid())
  sequenceId String
  sequence   Sequence @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
  contactId  String
  contact    Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  status String @default("pending")

  sgMessageId String?
  sentAt      DateTime?
  deliveredAt DateTime?
  openedAt    DateTime?
  clickedAt   DateTime?
  respondedAt DateTime?

  suppressReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([sequenceId, contactId])
  @@index([sequenceId, status])
  @@index([contactId, status])
  @@index([sgMessageId])
}

model EmailEvent {
  id         String    @id @default(cuid())
  sequenceId String?
  sequence   Sequence? @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
  contactId  String?
  contact    Contact?  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  email       String
  eventType   String
  timestamp   DateTime
  url         String?
  sgMessageId String?

  createdAt DateTime @default(now())

  @@index([email])
  @@index([sequenceId])
  @@index([eventType])
  @@index([sgMessageId])
}

model EventTask {
  id      String @id @default(cuid())
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  title       String
  description String?
  category    String
  completed   Boolean   @default(false)
  dueDate     DateTime?

  assignedTo String?
  priority   String  @default("medium")

  orderIndex Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId])
  @@index([eventId, completed])
}

model PipelineEventConfig {
  id           String @id @default(cuid())
  audienceType String @unique
  stages       String[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([audienceType])
}

model AdCampaign {
  id          String   @id @default(cuid())
  orgId       String
  org         Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  
  name        String
  status      String   @default("Draft")
  budget      Float
  landingPage String
  adText      String
  impressions Int      @default(0)
  clicks      Int      @default(0)
  spend       Float    @default(0)
  
  googleAdsId String?  // Google Ads campaign resource name
  metaAdsId   String?  // Meta/Facebook campaign ID
  platform    String   @default("Manual") // Manual, Google, Meta
  
  personaId   String?  // Link to persona used for this campaign
  persona     Persona? @relation(fields: [personaId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([orgId])
  @@index([status])
  @@index([personaId])
}

// üß© THE HUMAN STACK - Persona Model
model Persona {
  id             String   @id @default(cuid())
  orgId          String
  org            Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  
  personaName    String   // e.g., "Disconnected Dad"
  demographics   String   // Men 30-50, Arlington VA
  painPoint      String   // Core emotional driver
  desire         String   // Positive end-state
  motivators     String?  // What energizes them
  barriers       String?  // Why they haven't moved
  tone           String   // How to speak to them
  channels       String   // Where they hang out
  primaryStage   String   // Where they typically enter (curious, unaware, etc.)
  notes          String?  // Additional context
  
  adCampaigns    AdCampaign[]
  googleAdCampaigns GoogleAdCampaign[]
  engagementActions EngagementAction[]
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([orgId])
  @@index([primaryStage])
}

// Track all engagement activities
model EngagementAction {
  id        String   @id @default(cuid())
  orgId     String
  userId    String?  // Admin who initiated action
  
  type      String   // "email", "challenge", "story", "google_ad", "facebook_ad", "eventbrite"
  payload   String?  // JSON data about the action
  
  personaId String?  // Link to persona if used
  persona   Persona? @relation(fields: [personaId], references: [id])
  
  eventId   String?  // Link to event if applicable
  event     Event?   @relation(fields: [eventId], references: [id])
  
  status    String   @default("created") // created, sent, published, completed, failed
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([orgId])
  @@index([type])
  @@index([personaId])
  @@index([eventId])
  @@index([createdAt])
}

// üîë GOOGLE ADS INTEGRATION - OAuth & Campaign Management
model GoogleAdAccount {
  id                String    @id @default(cuid())
  orgId             String
  org               Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  
  displayName       String?   // "Ignite Strategies Ads" or user's label
  googleCustomerId  String?   // e.g., "123-456-7890"
  managerAccountId  String?   // MCC if acting as manager
  developerToken    String?   // global dev token (can be env var later)
  refreshToken      String?   // user-specific; used to fetch new access token
  accessToken       String?   // optional; transient; can regenerate
  tokenExpiry       DateTime?
  connectedEmail    String?   // who authorized it
  status            String    @default("active") // active, revoked, expired
  
  campaigns         GoogleAdCampaign[]
  syncLogs          GoogleAdSyncLog[]
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@index([orgId])
  @@index([status])
  @@index([googleCustomerId])
}

// üìä Campaign Table
model GoogleAdCampaign {
  id                String    @id @default(cuid())
  orgId             String
  org               Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  googleAdAccountId String?
  googleAdAccount   GoogleAdAccount? @relation(fields: [googleAdAccountId], references: [id])
  
  personaId         String?   // Link to persona used for AI generation
  persona           Persona?  @relation(fields: [personaId], references: [id])
  
  name              String
  objective         String?   // awareness, clicks, conversions
  dailyBudget       Float?    // in USD
  startDate         DateTime?
  endDate           DateTime?
  status            String    @default("draft") // draft, active, paused, completed
  
  // Google Ads API IDs (populated when pushed to Google)
  googleCampaignId  String?   // Google's campaign resource name
  
  // Analytics
  impressions       Int       @default(0)
  clicks            Int       @default(0)
  conversions       Int       @default(0)
  spend             Float     @default(0)
  
  adGroups          GoogleAdGroup[]
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@index([orgId])
  @@index([googleAdAccountId])
  @@index([personaId])
  @@index([status])
}

// üéØ AdGroup Table
model GoogleAdGroup {
  id                 String    @id @default(cuid())
  campaignId         String
  campaign           GoogleAdCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  name               String
  keywords           String[]  // array of search terms
  negativeKeywords   String[]  @default([])
  placements         String[]  @default([]) // e.g. YouTube or site placements
  
  // Targeting
  locations          String[]  @default([]) // geographic targeting
  languages          String[]  @default(["en"])
  ageRanges          String[]  @default([])
  genders            String[]  @default([])
  
  // Google Ads API ID
  googleAdGroupId    String?
  
  ads                GoogleAdCreative[]
  
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  @@index([campaignId])
}

// ü™Ñ AdCreative Table
model GoogleAdCreative {
  id                 String    @id @default(cuid())
  adGroupId          String
  adGroup            GoogleAdGroup @relation(fields: [adGroupId], references: [id], onDelete: Cascade)
  
  headline1          String?
  headline2          String?
  headline3          String?
  description        String?
  description2       String?
  finalUrl           String?
  displayUrl         String?
  imageUrl           String?
  callToAction       String?   // "Learn More", "Sign Up", etc.
  
  // Google Ads API ID
  googleAdId         String?
  
  // Performance
  impressions        Int       @default(0)
  clicks             Int       @default(0)
  conversions        Int       @default(0)
  
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  
  @@index([adGroupId])
}

// üîÅ Sync Log for debugging + refresh tracking
model GoogleAdSyncLog {
  id                String    @id @default(cuid())
  googleAdAccountId String
  googleAdAccount   GoogleAdAccount @relation(fields: [googleAdAccountId], references: [id], onDelete: Cascade)
  
  action            String    // "refresh_token", "fetch_campaigns", "create_campaign", etc.
  success           Boolean
  response          String?   // JSON response as text
  errorMessage      String?
  
  createdAt         DateTime  @default(now())
  
  @@index([googleAdAccountId])
  @@index([action])
  @@index([createdAt])
}

// üé¨ YOUTUBE INTEGRATION MODELS
model YouTubeChannel {
  id          String  @id @default(cuid())
  channelId   String  @unique // YouTube channel ID
  title       String
  description String?
  thumbnail   String?
  subscriberCount Int?
  viewCount   BigInt?
  videoCount  Int?
  
  // Links
  containerId String?
  container   Container? @relation(fields: [containerId], references: [id], onDelete: Cascade)
  orgId       String?
  org         Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade)
  
  // Tokens
  accessToken  String
  refreshToken String
  expiresAt    DateTime
  
  // Relations
  playlists    YouTubePlaylist[]
  videos       YouTubeVideo[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([containerId])
  @@index([orgId])
}

model YouTubePlaylist {
  id          String  @id @default(cuid())
  playlistId  String  @unique // YouTube playlist ID
  title       String
  description String?
  thumbnail   String?
  itemCount   Int?
  
  // Links
  channelId   String
  channel     YouTubeChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  
  // Relations
  videos      YouTubeVideo[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([channelId])
}

model YouTubeVideo {
  id          String  @id @default(cuid())
  videoId     String  @unique // YouTube video ID
  title       String
  description String?
  thumbnail   String?
  duration    String?
  viewCount   BigInt?
  likeCount   BigInt?
  commentCount Int?
  
  // Links
  channelId   String
  channel     YouTubeChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  playlistId  String?
  playlist    YouTubePlaylist? @relation(fields: [playlistId], references: [id], onDelete: SetNull)
  
  // Upload metadata
  uploadedAt  DateTime?
  privacyStatus String @default("public") // public, unlisted, private
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([channelId])
  @@index([playlistId])
}
