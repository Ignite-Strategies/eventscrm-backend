// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  mission   String?
  website   String?
  
  // Social media
  x         String?
  instagram String?
  facebook  String?
  linkedin  String?
  
  // Address
  street    String?
  city      String?
  state     String?
  zip       String?
  
  // Pipeline defaults
  pipelineDefaults String[] @default(["sop_entry", "rsvp", "paid", "attended", "champion"])
  audienceDefaults String[] @default(["org_members", "friends_family", "community_partners", "local_businesses", "general_public"])
  
  // Relations
  members       OrgMember[]
  supporters    Supporter[]
  familyProspects FamilyProspect[]
  events        Event[]
  templates     Template[]
  contactLists  ContactList[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrgMember {
  id        String @id @default(cuid())
  orgId     String?
  org       Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade)
  
  // Contact Info
  firstName String
  goesBy    String?
  lastName  String
  email     String?
  phone     String?
  
  // Address
  street    String?
  city      String?
  state     String?
  zip       String?
  
  // Organization Context
  employer              String?
  yearsWithOrganization Int?
  
  // Personal Information
  birthday     String? // Format: "MM/DD"
  married      Boolean @default(false)
  spouseName   String?
  numberOfKids Int     @default(0)
  
  // Story & Notes
  originStory String?
  notes       String?
  
  // App Access (optional - only for team members who can login)
  role       String? // "owner", "manager", or null (just a contact)
  firebaseId String? @unique
  photoURL   String?
  
  // Leadership Tags (Board, Committee, VIP, Donor, Volunteer)
  tags      String[] @default([])
  
  // Engagement Tracking
  categoryOfEngagement String @default("medium") // "high", "medium", "low", "inactive"
  
  // Relations
  eventAttendees EventAttendee[]
  contactListMembers ContactListMember[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([orgId, email])
  @@index([orgId])
  @@index([email])
}

model Supporter {
  id        String @id @default(cuid())
  orgId     String
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  
  // Contact Info
  firstName String
  goesBy    String?
  lastName  String
  email     String?
  phone     String?
  
  // Address
  street    String?
  city      String?
  state     String?
  zip       String?
  
  // Organization Context
  employer              String?
  yearsWithOrganization Int?
  
  // Engagement Tracking
  categoryOfEngagement String @default("medium") // "high", "medium", "low", "inactive"
  
  // Personal Information
  birthday     String? // Format: "MM/DD"
  married      Boolean @default(false)
  spouseName   String?
  numberOfKids Int     @default(0)
  
  // Story & Notes
  originStory String?
  notes       String?
  
  // Relations
  tags         SupporterTag[]
  pipelineEntries EventPipelineEntry[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([orgId, email])
  @@index([orgId])
}

model SupporterTag {
  id         String @id @default(cuid())
  supporterId String
  supporter  Supporter @relation(fields: [supporterId], references: [id], onDelete: Cascade)
  name       String // e.g., "knows_organizer", "high_value"
  value      String // e.g., "true", "false", "downtown"
  addedBy    String
  addedAt    DateTime @default(now())
  
  @@index([supporterId])
}

model Event {
  id        String @id @default(cuid())
  orgId     String
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  name      String
  slug      String
  description String?
  date      String? // FLEXIBLE: "2025-10-23", "10/23/2025", whatever!
  time      String? // FLEXIBLE: "6:00 PM - 9:00 PM", "6 PM", "9:00", whatever!
  
  // MVP1: Single Active Event
  status    String @default("upcoming") // "upcoming", "active", "past", "draft"
  
  // Event Location (NOT confused with Contact location)
  eventVenueName String?
  eventStreet    String?
  eventCity      String?
  eventState     String?
  eventZip       String?
  
  hasTickets Boolean @default(false)
  ticketCost  Float   @default(0)
  
  // Fundraising Goals
  fundraisingGoal    Float @default(0)
  additionalExpenses Float @default(0)
  
  // Pipeline overrides
  pipelines String[] // optional override of org defaults
  
  // Pipeline Rules
  autoSopOnIntake     Boolean @default(true)
  sopTriggers         String[] @default(["landing_form", "csv", "qr", "admin_add"])
  rsvpTriggers        String[] @default(["form_rsvp", "button_click"])
  paidTriggers        String[] @default(["stripe_webhook"])
  minEngagement       Int     @default(3)
  championTags        String[] @default(["role:ao_q", "role:influencer", "shared_media"])
  manualOverrideAllowed Boolean @default(true)
  
  // Goals
  totalFundraise Float @default(0)
  ticketTarget   Int   @default(0)
  costs          Float @default(0)
  
  // Audience Segmentation
  membersConversionRate Float @default(0.25) // 25%
  membersTargetCount    Int   @default(0)
  friendsConversionRate Float @default(0.15) // 15%
  friendsTargetCount    Int   @default(0)
  adsConversionRate     Float @default(0.05) // 5%
  adsTargetCount        Int   @default(0)
  totalOutreachTarget   Int   @default(0)
  
  // Relations
  eventPipelines  EventPipeline[] // NEW: Proper pipeline management
  pipelineEntries EventPipelineEntry[] // OLD: Legacy, to be deprecated
  attendees       EventAttendee[]
  tasks           EventTask[]
  eventForms      EventForm[] // Forms for this event
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([orgId, slug])
  @@index([orgId])
}


// NEW: EventPipeline - First-class pipeline model
model EventPipeline {
  id           String @id @default(cuid())
  orgId        String
  eventId      String
  event        Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  // Pipeline Identity - 5 audience types
  audienceType String // "org_members" | "friends_family" | "landing_page_public" | "community_partners" | "cold_outreach"
  
  // Status
  isActive     Boolean @default(true)
  
  // Relations
  attendees       EventAttendee[]
  forms           EventForm[]
  pipelineStages  PipelineStage[] // Stages for this pipeline (not hardcoded!)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([eventId, audienceType])
  @@index([eventId])
  @@index([orgId])
}

// NEW: EventForm - Form configuration
model EventForm {
  id           String @id @default(cuid())
  orgId        String
  eventId      String
  event        Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  pipelineId   String
  pipeline     EventPipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  
  // Form Identity
  name         String // "Bros & Brews Slack Soft Commit"
  slug         String @unique // "bros-soft-commit-slack"
  description  String?
  
  // Pipeline Integration
  targetStage  String // Where they land: "soft_commit"
  
  // Form Configuration
  fields       Json // Field definitions
  styling      Json? // Custom styling
  
  // Status & Analytics
  isActive          Boolean @default(true)
  submissionCount   Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([pipelineId])
  @@index([slug])
  @@index([eventId])
  @@index([orgId])
}

// OLD: Legacy model, to be deprecated
model EventPipelineEntry {
  id           String @id @default(cuid())
  orgId        String
  eventId      String
  event        Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  supporterId  String
  supporter    Supporter @relation(fields: [supporterId], references: [id], onDelete: Cascade)
  
  audienceType String // "org_member", "friend_spouse", "community_partner", "business_sponsor", "champion"
  stage        String // "in_funnel", "general_awareness", "personal_invite", "expressed_interest", "soft_commit", "paid", "cant_attend"
  source       String? // "admin_add", "csv", "bulk_add", etc.
  notes        String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([eventId, supporterId, audienceType])
  @@index([eventId, audienceType, stage])
  @@index([orgId])
}

model EventAttendee {
  id          String @id @default(cuid())
  orgId       String
  eventId     String
  event       Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  // NEW: Links to specific pipeline
  pipelineId  String?
  pipeline    EventPipeline? @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  
  // Links to OrgMember (master contact list)
  orgMemberId String
  orgMember   OrgMember @relation(fields: [orgMemberId], references: [id], onDelete: Cascade)
  
  // Pipeline stage for THIS event (renamed from "stage" to "currentStage" for clarity)
  currentStage String @default("in_funnel") // Current position in pipeline
  stage        String @default("in_funnel") // DEPRECATED: Use currentStage instead
  
  // Audience type (DEPRECATED: Use pipeline.audienceType instead)
  audienceType String? // "org_members" | "friends_family" | "landing_page_public" | "community_partners" | "cold_outreach"
  
  // Form tracking
  submittedFormId String? // Which form created this attendee?
  
  // Final attendance data
  attended    Boolean @default(false)
  checkedInAt DateTime?
  ticketType  String?
  amountPaid  Float   @default(0)
  notes       String? // JSON with custom form fields
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // NOTE: Unique constraint on pipelineId allows same person in multiple pipelines for one event
  // @@unique([eventId, orgMemberId]) // OLD: One person per event total - REMOVED for multi-pipeline support
  @@unique([pipelineId, orgMemberId]) // NEW: One person per pipeline (can be in multiple pipelines for same event)
  @@index([eventId, stage])
  @@index([eventId, currentStage])
  @@index([eventId, orgMemberId]) // Index for queries
  @@index([pipelineId])
  @@index([orgId])
}

model FamilyProspect {
  id        String @id @default(cuid())
  orgId     String
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  
  // Contact Info
  firstName String
  goesBy    String?
  lastName  String
  email     String?
  phone     String?
  
  // Address
  street    String?
  city      String?
  state     String?
  zip       String?
  
  // Relationship Context
  relationshipToMember String? // "friend", "co_worker", "neighbor", "family"
  howDidYouMeet        String? // "work", "neighborhood", "mutual_friend"
  eventInterest        String? // "high", "medium", "low"
  
  // Personal Information
  birthday     String? // Format: "MM/DD"
  married      Boolean @default(false)
  spouseName   String?
  numberOfKids Int     @default(0)
  
  // Story & Notes
  originStory String?
  notes       String?
  
  // Relations
  tags         FamilyProspectTag[]
  contactListMembers ContactListMember[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([orgId, email])
  @@index([orgId])
}

model FamilyProspectTag {
  id         String @id @default(cuid())
  prospectId String
  prospect   FamilyProspect @relation(fields: [prospectId], references: [id], onDelete: Cascade)
  name       String
  value      String
  addedBy    String
  addedAt    DateTime @default(now())
  
  @@index([prospectId])
}

model Template {
  id          String @id @default(cuid())
  orgId       String
  org         Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  name        String
  description String?
  subject     String
  body        String
  type        String @default("email")
  variables   Json   @default("[]")
  usageCount  Int    @default(0)
  lastUsed    DateTime?
  isActive    Boolean @default(true)
  createdBy   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([orgId])
}

model ContactList {
  id          String @id @default(cuid())
  orgId       String
  org         Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  name        String
  description String?
  type        String // "manual", "pipeline", "tag_based", "dynamic"
  
  // Pipeline lists
  eventId     String?
  audienceType String?
  stages      String[]
  
  // Tag-based lists
  tagFilters  Json? // Complex tag filtering criteria
  
  // Dynamic lists
  filters     Json? // Complex filtering criteria
  
  // Stats
  totalContacts Int      @default(0)
  lastUpdated   DateTime @default(now())
  usageCount    Int      @default(0)
  lastUsed      DateTime?
  isActive      Boolean  @default(true)
  createdBy     String?
  tags          String[]
  
  // Relations
  members ContactListMember[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([orgId, name])
  @@index([orgId])
}

model ContactListMember {
  id            String @id @default(cuid())
  contactListId String
  contactList   ContactList @relation(fields: [contactListId], references: [id], onDelete: Cascade)
  
  // Can link to either OrgMember OR Supporter OR Prospect
  orgMemberId   String?
  orgMember     OrgMember? @relation(fields: [orgMemberId], references: [id], onDelete: Cascade)
  prospectId    String?
  prospect      FamilyProspect? @relation(fields: [prospectId], references: [id], onDelete: Cascade)
  
  addedAt DateTime @default(now())
  
  @@index([contactListId])
  @@index([orgMemberId])
  @@index([prospectId])
}

// EventLocation - BREADCRUMB for future venue reuse feature
// For MVP 1: Use Event.eventVenueName, eventStreet, etc. directly

model EventTask {
  id          String @id @default(cuid())
  eventId     String
  event       Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  // Task Details
  title       String
  description String?
  category    String // "design", "marketing", "tech", "logistics", "finance"
  completed   Boolean @default(false)
  dueDate     DateTime?
  
  // Assignment
  assignedTo  String? // Future: link to team member
  priority    String @default("medium") // "low", "medium", "high"
  
  // Order
  orderIndex  Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([eventId])
  @@index([eventId, completed])
}

// NEW: Stage Model - All possible stages (could be 30+)
model Stage {
  id          String @id @default(cuid())
  orgId       String
  
  // Stage Identity
  name        String // "In Funnel", "Soft Commit", "VIP Invite", etc.
  slug        String // "in_funnel", "soft_commit", "vip_invite", etc.
  description String? // "Just entered the pipeline"
  
  // Relations
  pipelineStages PipelineStage[] // Which pipelines use this stage
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([orgId, slug])
  @@index([orgId])
  @@index([slug])
}

// NEW: PipelineStage - Junction table (which stages for THIS pipeline)
model PipelineStage {
  id         String @id @default(cuid())
  pipelineId String
  pipeline   EventPipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  stageId    String
  stage      Stage @relation(fields: [stageId], references: [id], onDelete: Cascade)
  
  // Order in this pipeline
  orderIndex Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([pipelineId, stageId])
  @@index([pipelineId, orderIndex])
}
