generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Container {
  id      String  @id @default(cuid())
  name    String
  slug    String  @unique
  description String?

  // Direct relations to Contact
  contacts Contact[]
  
  // Reference to primary contact (who owns this container)
  primaryContactId String?
  primaryContact   Contact? @relation("ContainerPrimaryContact", fields: [primaryContactId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id      String  @id @default(cuid())
  name    String
  slug    String  @unique
  mission String?
  website String?

  x         String?
  instagram String?
  facebook  String?
  linkedin  String?

  street String?
  city   String?
  state  String?
  zip    String?

  pipelineDefaults String[] @default(["in_funnel", "general_awareness", "personal_invite", "expressed_interest", "rsvped", "thanked", "paid", "thanked_paid", "attended", "followed_up"])
  audienceDefaults String[] @default(["org_members", "friends_family", "landing_page_public", "community_partners", "cold_outreach"])

  googleAdsConfig String? // JSON: { refreshToken, customerId, connectedAt }
  metaConfig      String? // JSON: { accessToken, pageId, connectedAt }

  // ‚úÖ NEW: Direct relations to Contact
  contacts        Contact[]
  
  // Reverse relation - contacts where this org is the primary
  primaryContacts Contact[] @relation("OrgPrimaryContact")
  
  // ‚ö†Ô∏è LEGACY (to be removed)
  members         OrgMember[]
  supporters      Supporter[]
  familyProspects FamilyProspect[]
  
  events          Event[]
  templates       Template[]
  contactLists    ContactList[]
  admins          Admin[]
  campaigns       Campaign[]
  adCampaigns     AdCampaign[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id String @id @default(cuid())

  // PERSONHOOD
  firstName String
  lastName  String
  email     String  @unique
  phone     String?
  goesBy    String?
  street    String?
  city      String?
  state     String?
  zip       String?
  birthday  String?
  married   Boolean @default(false)
  spouseName String?
  numberOfKids Int @default(0)
  employer  String?

  // ORG STUFF
  chapterResponsibleFor String?
  yearsWithOrganization Int?
  leadershipRole        String?
  engagementValue       Int?
  orgTags               String[] @default([])
  
  // FOREIGN KEYS (that's it!)
  orgId      String?
  org        Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade)
  
  // Reverse relation - orgs where this contact is the primary
  ownedOrgs Organization[] @relation("OrgPrimaryContact")
  
  containerId String?
  container   Container? @relation(fields: [containerId], references: [id], onDelete: Cascade)
  
  // Reverse relation - containers where this contact is the primary
  ownedContainers Container[] @relation("ContainerPrimaryContact")
  
  eventId    String?
  event      Event? @relation(fields: [eventId], references: [id], onDelete: SetNull)
  
  // Reverse relation - events where this contact is the primary
  ownedEvents Event[] @relation("EventPrimaryContact")
  
  // TARGETING
  audienceType String?
  currentStage String?
  
  // EVENT DETAILS
  attended     Boolean @default(false)
  amountPaid   Float @default(0)
  spouseOrOther String?
  howManyInParty Int?
  
  // OTHER
  contactListId String?
  contactList   ContactList? @relation(fields: [contactListId], references: [id])
  
  sequenceContacts SequenceContact[]
  emailEvents      EmailEvent[]

  firebaseId String? @unique
  photoURL   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([orgId])
  @@index([eventId])
  @@index([firebaseId])
  @@index([eventId, audienceType, currentStage])
}

model Engagement {
  id    String @id @default(cuid())
  value Int    @unique // 1=undetermined, 2=low, 3=medium, 4=high
  
  orgMembers OrgMember[]
  
  createdAt DateTime @default(now())
  
  @@index([value])
}

model LikelihoodToAttend {
  id    String @id @default(cuid())
  value Int    @unique // 1=high, 2=medium, 3=low, 4=support_from_afar
  
  eventAttendees EventAttendee[]
  
  createdAt DateTime @default(now())
  
  @@index([value])
}

model LeadershipRole {
  id    String @id @default(cuid())
  value Int    @unique // 1=none, 2=project_lead, 3=committee, 4=board
  name  String        // "None", "Project Lead", "Committee", "Board"
  
  // TODO: Future migration - add leadershipRoleId to OrgMember and remove leadershipRole string
  // orgMembers OrgMember[]
  
  createdAt DateTime @default(now())
  
  @@index([value])
}


model OrgMember {
  id        String   @id @default(cuid())
  contactId String?  // LEGACY - not used in new Contact-first model

  orgId String?
  org   Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade)

  // Org-specific fields ONLY (relationship to THIS org)
  yearsWithOrganization Int?
  leadershipRole        String? // Board, Committee, Staff, Volunteer Lead, etc.
  originStory           String? // How they got involved with THIS org
  notes                 String?
  role                  String? // System role (for login access)
  firebaseId            String? @unique
  photoURL              String?
  tags                  String[] @default([])
  chapterresponsiblefor String? // Chapter/region/team responsible for (e.g., "Los Angeles", "Manhattan", "Product Team")

  // Engagement level (relationship to THIS org)
  engagementId String? 
  engagement   Engagement? @relation(fields: [engagementId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([contactId, orgId]) // üî• One membership per Contact per Org
  @@index([contactId])
  @@index([firebaseId])
  @@index([orgId])
  @@index([engagementId])
}

model Supporter {
  id    String       @id @default(cuid())
  orgId String
  org   Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  firstName String
  goesBy    String?
  lastName  String
  email     String?
  phone     String?

  street String?
  city   String?
  state  String?
  zip    String?

  employer              String?
  yearsWithOrganization Int?

  categoryOfEngagement String @default("medium")

  birthday     String?
  married      Boolean @default(false)
  spouseName   String?
  numberOfKids Int     @default(0)

  originStory String?
  notes       String?

  tags            SupporterTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orgId, email])
  @@index([orgId])
}

model SupporterTag {
  id          String    @id @default(cuid())
  supporterId String
  supporter   Supporter @relation(fields: [supporterId], references: [id], onDelete: Cascade)
  name        String
  value       String
  addedBy     String
  addedAt     DateTime  @default(now())

  @@index([supporterId])
}

model Event {
  id          String       @id @default(cuid())
  orgId       String
  org         Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  name        String
  slug        String
  description String?
  date        String?
  time        String?

  status String @default("upcoming")

  eventVenueName String?
  eventStreet    String?
  eventCity      String?
  eventState     String?
  eventZip       String?

  hasTickets Boolean @default(false)
  ticketCost Float   @default(0)

  fundraisingGoal    Float @default(0)
  additionalExpenses Float @default(0)

  pipelines String[]

  rsvpTriggers          String[] @default(["form_rsvp", "button_click"])
  paidTriggers          String[] @default(["stripe_webhook"])
  minEngagement         Int      @default(3)
  championTags          String[] @default(["role:ao_q", "role:influencer", "shared_media"])
  manualOverrideAllowed Boolean  @default(true)

  totalFundraise Float @default(0)
  ticketTarget   Int   @default(0)
  costs          Float @default(0)

  membersConversionRate Float @default(0.25)
  membersTargetCount    Int   @default(0)
  friendsConversionRate Float @default(0.15)
  friendsTargetCount    Int   @default(0)
  adsConversionRate     Float @default(0.05)
  adsTargetCount        Int   @default(0)
  totalOutreachTarget   Int   @default(0)

  // ‚úÖ NEW: Direct relation to Contact
  contacts        Contact[]
  
  // Reverse relation - contacts where this event is the primary
  primaryContacts Contact[] @relation("EventPrimaryContact")
  
  // ‚ö†Ô∏è LEGACY (to be removed)
  attendees       EventAttendee[]
  
  tasks           EventTask[]
  publicForms     PublicForm[]
  eventForms      EventForm[]
  admins          Admin[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orgId, slug])
  @@index([orgId])
}

model PublicForm {
  id      String @id @default(cuid())
  orgId   String
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  slug        String  @unique
  title       String
  description String?

  collectFirstName Boolean @default(true)
  collectLastName  Boolean @default(true)
  collectEmail     Boolean @default(true)
  collectPhone     Boolean @default(true)

  audienceType String
  targetStage  String

  fields Json?

  eventForms     EventForm[]
  eventAttendees EventAttendee[]

  isActive        Boolean @default(true)
  submissionCount Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@index([eventId])
  @@index([orgId])
  @@index([audienceType])
}

model EventForm {
  id           String     @id @default(cuid())
  publicFormId String
  publicForm   PublicForm @relation(fields: [publicFormId], references: [id], onDelete: Cascade)
  orgId        String
  eventId      String
  event        Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)

  internalName    String
  internalPurpose String?

  styling Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([publicFormId])
  @@index([eventId])
  @@index([orgId])
}

model Admin {
  id        String        @id @default(cuid())
  orgId     String?
  org       Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade)
  eventId   String?
  event     Event?        @relation(fields: [eventId], references: [id], onDelete: Cascade)

  firebaseId String? @unique

  role        String
  permissions Json?
  isActive    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to profile (future)
  profile AdminProfile?
  
  // File uploads
  attachments CampaignAttachment[]

  @@unique([orgId, eventId])
  @@index([orgId])
  @@index([eventId])
  @@index([firebaseId])
  @@index([isActive])
}

// FUTURE: Admin Profile - Personal info separate from auth/permissions
model AdminProfile {
  id        String   @id @default(cuid())
  adminId   String   @unique
  admin     Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  
  email     String   @unique
  firstName String?
  lastName  String?
  phone     String?
  photoURL  String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

model EventAttendee {
  id      String @id @default(cuid())
  orgId   String
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  contactId String?  // LEGACY - not used in new Contact-first model

  currentStage String @default("aware")
  audienceType String

  submittedFormId String?
  submittedForm   PublicForm? @relation(fields: [submittedFormId], references: [id])

  attended    Boolean   @default(false)
  checkedInAt DateTime?
  ticketType  String?
  amountPaid  Float     @default(0)
  
  // Event-specific data from forms (rock solid columns!)
  spouseOrOther        String?  // "solo", "spouse", "other"
  howManyInParty       Int?     // Total attendees in their party
  
  // Likelihood to attend (FK to reference table)
  likelihoodToAttendId String?
  likelihoodToAttend   LikelihoodToAttend? @relation(fields: [likelihoodToAttendId], references: [id])
  
  notes Json?  // Truly custom/unknown fields only (as Json, not String!)
  
  // TEMPORARY: Check if old form data is still here
  customField Json?  // Old form data - check if this exists!

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([eventId, contactId, audienceType])
  @@index([eventId, currentStage])
  @@index([eventId, contactId])
  @@index([eventId, audienceType])
  @@index([orgId])
  @@index([contactId])
}

model FamilyProspect {
  id    String       @id @default(cuid())
  orgId String
  org   Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  firstName String
  goesBy    String?
  lastName  String
  email     String?
  phone     String?

  street String?
  city   String?
  state  String?
  zip    String?

  relationshipToMember String?
  howDidYouMeet        String?
  eventInterest        String?

  birthday     String?
  married      Boolean @default(false)
  spouseName   String?
  numberOfKids Int     @default(0)

  originStory String?
  notes       String?

  tags FamilyProspectTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orgId, email])
  @@index([orgId])
}

model FamilyProspectTag {
  id         String         @id @default(cuid())
  prospectId String
  prospect   FamilyProspect @relation(fields: [prospectId], references: [id], onDelete: Cascade)
  name       String
  value      String
  addedBy    String
  addedAt    DateTime       @default(now())

  @@index([prospectId])
}

model Template {
  id          String       @id @default(cuid())
  orgId       String
  org         Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  name        String
  description String?
  subject     String
  body        String
  type        String       @default("email")
  variables   Json         @default("[]")
  usageCount  Int          @default(0)
  lastUsed    DateTime?
  isActive    Boolean      @default(true)
  createdBy   String?

  sequences Sequence[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orgId])
}

model ContactList {
  id          String       @id @default(cuid())
  orgId       String
  org         Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  name        String
  description String?
  type        String

  eventId      String?
  audienceType String?
  stages       String[]

  tagFilters Json?

  filters Json?

  totalContacts Int       @default(0)
  lastUpdated   DateTime  @default(now())
  usageCount    Int       @default(0)
  lastUsed      DateTime?
  isActive      Boolean   @default(true)
  createdBy     String?
  tags          String[]

  contacts  Contact[]
  campaigns Campaign[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orgId, name])
  @@index([orgId])
}

model Campaign {
  id    String       @id @default(cuid())
  orgId String
  org   Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  name        String
  description String?

  contactListId String?
  contactList   ContactList? @relation(fields: [contactListId], references: [id])

  // Email content
  subject String?
  body    String?

  status String @default("draft")

  sequences Sequence[]
  attachments CampaignAttachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orgId, name])
  @@index([orgId])
  @@index([status])
}

model CampaignAttachment {
  id          String   @id @default(cuid())
  campaignId  String
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  adminId     String?
  admin       Admin?   @relation(fields: [adminId], references: [id])
  
  filename    String   // Stored filename (with timestamp)
  originalName String  // Original filename from upload
  mimeType    String   // MIME type of the file
  filePath    String   // Full path to the file on disk
  fileSize    Int      // File size in bytes
  
  uploadedAt  DateTime @default(now())
  
  @@index([campaignId])
  @@index([adminId])
}

model Sequence {
  id         String   @id @default(cuid())
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  name    String
  subject String
  html    String

  templateId String?
  template   Template? @relation(fields: [templateId], references: [id])

  delayDays Int @default(0)
  order     Int

  status    String    @default("draft")
  sentAt    DateTime?
  totalSent Int       @default(0)

  sequenceContacts SequenceContact[]
  emailEvents      EmailEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([campaignId, name])
  @@index([campaignId, order])
  @@index([status])
}

model SequenceContact {
  id         String   @id @default(cuid())
  sequenceId String
  sequence   Sequence @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
  contactId  String
  contact    Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  status String @default("pending")

  sgMessageId String?
  sentAt      DateTime?
  deliveredAt DateTime?
  openedAt    DateTime?
  clickedAt   DateTime?
  respondedAt DateTime?

  suppressReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([sequenceId, contactId])
  @@index([sequenceId, status])
  @@index([contactId, status])
  @@index([sgMessageId])
}

model EmailEvent {
  id         String    @id @default(cuid())
  sequenceId String?
  sequence   Sequence? @relation(fields: [sequenceId], references: [id], onDelete: Cascade)
  contactId  String?
  contact    Contact?  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  email       String
  eventType   String
  timestamp   DateTime
  url         String?
  sgMessageId String?

  createdAt DateTime @default(now())

  @@index([email])
  @@index([sequenceId])
  @@index([eventType])
  @@index([sgMessageId])
}

model EventTask {
  id      String @id @default(cuid())
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  title       String
  description String?
  category    String
  completed   Boolean   @default(false)
  dueDate     DateTime?

  assignedTo String?
  priority   String  @default("medium")

  orderIndex Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId])
  @@index([eventId, completed])
}

model PipelineEventConfig {
  id           String @id @default(cuid())
  audienceType String @unique
  stages       String[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([audienceType])
}

model AdCampaign {
  id          String   @id @default(cuid())
  orgId       String
  org         Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  
  name        String
  status      String   @default("Draft")
  budget      Float
  landingPage String
  adText      String
  impressions Int      @default(0)
  clicks      Int      @default(0)
  spend       Float    @default(0)
  
  googleAdsId String?  // Google Ads campaign resource name
  metaAdsId   String?  // Meta/Facebook campaign ID
  platform    String   @default("Manual") // Manual, Google, Meta
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([orgId])
  @@index([status])
}
