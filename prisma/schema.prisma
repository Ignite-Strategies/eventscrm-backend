// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  mission   String?
  website   String?
  
  // Social media
  x         String?
  instagram String?
  facebook  String?
  linkedin  String?
  
  // Address
  street    String?
  city      String?
  state     String?
  zip       String?
  
  // Pipeline defaults
  pipelineDefaults String[] @default(["sop_entry", "rsvp", "paid", "attended", "champion"])
  audienceDefaults String[] @default(["org_members", "friends_family", "community_partners", "local_businesses", "general_public"])
  
  // Relations
  contacts      Contact[] // Universal person records
  members       OrgMember[] // Promoted contacts in master list
  supporters    Supporter[] // Legacy, to be deprecated
  familyProspects FamilyProspect[]
  events        Event[]
  templates     Template[]
  contactLists  ContactList[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// NEW: Contact - Universal person record (everyone starts here)
model Contact {
  id        String @id @default(cuid())
  orgId     String
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  
  // Basic Info (minimal)
  firstName String
  lastName  String
  email     String
  phone     String?
  
  // Relations
  eventAttendees EventAttendee[] // Events they're attending
  orgMember      OrgMember? // If promoted to master list
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([orgId, email])
  @@index([orgId])
  @@index([email])
}

// NEW: OrgMember - Promoted contacts in master list
model OrgMember {
  id        String @id @default(cuid())
  contactId String? @unique
  contact   Contact? @relation(fields: [contactId], references: [id], onDelete: Cascade)
  
  // Organization link (for members relation in Organization model)
  orgId     String?
  org       Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade)
  
  // Basic auth fields (for users without Contact link yet)
  firstName String?
  lastName  String?
  email     String?
  phone     String?
  
  // Extended Contact Info (beyond basic Contact)
  goesBy    String?
  street    String?
  city      String?
  state     String?
  zip       String?
  
  // Organization Context
  employer              String?
  yearsWithOrganization Int?
  
  // Personal Information
  birthday     String? // Format: "MM/DD"
  married      Boolean @default(false)
  spouseName   String?
  numberOfKids Int     @default(0)
  
  // Story & Notes
  originStory String?
  notes       String?
  
  // App Access (optional - only for team members who can login)
  role       String? // "owner", "manager", or null
  firebaseId String? @unique
  photoURL   String?
  
  // Leadership Tags (Board, Committee, VIP, Donor, Volunteer)
  tags      String[] @default([])
  
  // Engagement Tracking
  categoryOfEngagement String @default("medium") // "high", "medium", "low", "inactive"
  
  // Relations
  contactListMembers ContactListMember[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([contactId])
  @@index([firebaseId])
  @@index([orgId])
}

model Supporter {
  id        String @id @default(cuid())
  orgId     String
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  
  // Contact Info
  firstName String
  goesBy    String?
  lastName  String
  email     String?
  phone     String?
  
  // Address
  street    String?
  city      String?
  state     String?
  zip       String?
  
  // Organization Context
  employer              String?
  yearsWithOrganization Int?
  
  // Engagement Tracking
  categoryOfEngagement String @default("medium") // "high", "medium", "low", "inactive"
  
  // Personal Information
  birthday     String? // Format: "MM/DD"
  married      Boolean @default(false)
  spouseName   String?
  numberOfKids Int     @default(0)
  
  // Story & Notes
  originStory String?
  notes       String?
  
  // Relations
  tags         SupporterTag[]
  pipelineEntries EventPipelineEntry[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([orgId, email])
  @@index([orgId])
}

model SupporterTag {
  id         String @id @default(cuid())
  supporterId String
  supporter  Supporter @relation(fields: [supporterId], references: [id], onDelete: Cascade)
  name       String // e.g., "knows_organizer", "high_value"
  value      String // e.g., "true", "false", "downtown"
  addedBy    String
  addedAt    DateTime @default(now())
  
  @@index([supporterId])
}

model Event {
  id        String @id @default(cuid())
  orgId     String
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  name      String
  slug      String
  description String?
  date      String? // FLEXIBLE: "2025-10-23", "10/23/2025", whatever!
  time      String? // FLEXIBLE: "6:00 PM - 9:00 PM", "6 PM", "9:00", whatever!
  
  // MVP1: Single Active Event
  status    String @default("upcoming") // "upcoming", "active", "past", "draft"
  
  // Event Location (NOT confused with Contact location)
  eventVenueName String?
  eventStreet    String?
  eventCity      String?
  eventState     String?
  eventZip       String?
  
  hasTickets Boolean @default(false)
  ticketCost  Float   @default(0)
  
  // Fundraising Goals
  fundraisingGoal    Float @default(0)
  additionalExpenses Float @default(0)
  
  // Pipeline overrides
  pipelines String[] // optional override of org defaults
  
  // Pipeline Rules
  autoSopOnIntake     Boolean @default(true)
  sopTriggers         String[] @default(["landing_form", "csv", "qr", "admin_add"])
  rsvpTriggers        String[] @default(["form_rsvp", "button_click"])
  paidTriggers        String[] @default(["stripe_webhook"])
  minEngagement       Int     @default(3)
  championTags        String[] @default(["role:ao_q", "role:influencer", "shared_media"])
  manualOverrideAllowed Boolean @default(true)
  
  // Goals
  totalFundraise Float @default(0)
  ticketTarget   Int   @default(0)
  costs          Float @default(0)
  
  // Audience Segmentation
  membersConversionRate Float @default(0.25) // 25%
  membersTargetCount    Int   @default(0)
  friendsConversionRate Float @default(0.15) // 15%
  friendsTargetCount    Int   @default(0)
  adsConversionRate     Float @default(0.05) // 5%
  adsTargetCount        Int   @default(0)
  totalOutreachTarget   Int   @default(0)
  
  // Relations
  pipelineEntries EventPipelineEntry[] // OLD: Legacy, to be deprecated
  attendees       EventAttendee[]
  tasks           EventTask[]
  eventForms      EventForm[] // Forms for this event
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([orgId, slug])
  @@index([orgId])
}


// REMOVED: EventPipeline - Deprecated for MVP1
// Audience types are now hardcoded strings in EventForm.audienceType and EventAttendee.audienceType

// NEW: EventForm - Form configuration
model EventForm {
  id           String @id @default(cuid())
  orgId        String
  eventId      String
  event        Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  // Audience type (hardcoded - no EventPipeline model for MVP1)
  // Maps to EventAttendee.audienceType when form is submitted
  audienceType String // "org_members" | "friends_family" | "landing_page_public" | "community_partners" | "cold_outreach"
  
  // Internal (CRM only) - Clean naming
  internalName     String? // "Bros & Brews Soft Commit Form" (optional for migration)
  internalPurpose String? // "Collect soft commits for Bros & Brews event"
  slug            String @unique // "bros-soft-commit"
  
  // Public (Landing Page) - Clean naming
  publicTitle       String // "Sign up for Bros & Brews!"
  publicDescription String? // "Fill out the form below to let us know..."
  
  // Pipeline Integration
  targetStage  String // Where contacts land when they submit this form (maps to EventAttendee.currentStage)
  // Examples: "in_funnel", "general_awareness", "personal_invite", "expressed_interest", "soft_commit", "paid"
  
  // Form Configuration - RELATIONAL FIELDS!
  formFields   FormField[] // Relational fields instead of JSON
  styling      Json? // Custom styling
  
  // Standard Contact Fields (auto-populated by frontend)
  collectName     Boolean @default(true) // "Full Name" field
  collectEmail    Boolean @default(true) // "Email Address" field  
  collectPhone    Boolean @default(true) // "Phone Number" field
  
  // Status & Analytics
  isActive          Boolean @default(true)
  submissionCount   Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([slug])
  @@index([eventId])
  @@index([orgId])
  @@index([audienceType])
}

// NEW: FormField - Individual form fields (like HubSpot)
model FormField {
  id        String @id @default(cuid())
  formId    String
  form      EventForm @relation(fields: [formId], references: [id], onDelete: Cascade)
  
  // Field Configuration
  fieldType    String // "text", "email", "tel", "textarea", "select", "radio", "checkbox", "number"
  label        String // "Full Name", "Email Address", "Phone Number"
  placeholder  String? // "Enter your full name"
  helpText     String? // "We'll use this to contact you"
  
  // Validation
  isRequired   Boolean @default(false)
  minLength    Int?
  maxLength    Int?
  minValue     Float?
  maxValue     Float?
  
  // Options (for select/radio/checkbox)
  options      Json? // [{ value: "yes", label: "Yes" }, { value: "no", label: "No" }]
  
  // Display Order
  displayOrder Int @default(0)
  
  // Field Settings
  isActive     Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([formId])
  @@index([fieldType])
}

// OLD: Legacy model, to be deprecated
model EventPipelineEntry {
  id           String @id @default(cuid())
  orgId        String
  eventId      String
  event        Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  supporterId  String
  supporter    Supporter @relation(fields: [supporterId], references: [id], onDelete: Cascade)
  
  audienceType String // "org_member", "friend_spouse", "community_partner", "business_sponsor", "champion"
  stage        String // "in_funnel", "general_awareness", "personal_invite", "expressed_interest", "soft_commit", "paid", "cant_attend"
  source       String? // "admin_add", "csv", "bulk_add", etc.
  notes        String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([eventId, supporterId, audienceType])
  @@index([eventId, audienceType, stage])
  @@index([orgId])
}

model EventAttendee {
  id          String @id @default(cuid())
  orgId       String
  eventId     String
  event       Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  // Links to Contact (the universal person record)
  contactId String
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  
  // Pipeline tracking (hardcoded - no EventPipeline model)
  currentStage String @default("in_funnel") // Current position in funnel
  audienceType String // "org_members" | "friends_family" | "landing_page_public" | "community_partners" | "cold_outreach"
  
  // Form tracking
  submittedFormId String? // Which form created this attendee?
  
  // Final attendance data
  attended    Boolean @default(false)
  checkedInAt DateTime?
  ticketType  String?
  amountPaid  Float   @default(0)
  notes       String? // JSON with custom form fields
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // NOTE: One contact per event+audienceType combo
  @@unique([eventId, contactId, audienceType])
  @@index([eventId, currentStage])
  @@index([eventId, contactId])
  @@index([eventId, audienceType])
  @@index([orgId])
  @@index([contactId])
}

model FamilyProspect {
  id        String @id @default(cuid())
  orgId     String
  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  
  // Contact Info
  firstName String
  goesBy    String?
  lastName  String
  email     String?
  phone     String?
  
  // Address
  street    String?
  city      String?
  state     String?
  zip       String?
  
  // Relationship Context
  relationshipToMember String? // "friend", "co_worker", "neighbor", "family"
  howDidYouMeet        String? // "work", "neighborhood", "mutual_friend"
  eventInterest        String? // "high", "medium", "low"
  
  // Personal Information
  birthday     String? // Format: "MM/DD"
  married      Boolean @default(false)
  spouseName   String?
  numberOfKids Int     @default(0)
  
  // Story & Notes
  originStory String?
  notes       String?
  
  // Relations
  tags         FamilyProspectTag[]
  contactListMembers ContactListMember[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([orgId, email])
  @@index([orgId])
}

model FamilyProspectTag {
  id         String @id @default(cuid())
  prospectId String
  prospect   FamilyProspect @relation(fields: [prospectId], references: [id], onDelete: Cascade)
  name       String
  value      String
  addedBy    String
  addedAt    DateTime @default(now())
  
  @@index([prospectId])
}

model Template {
  id          String @id @default(cuid())
  orgId       String
  org         Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  name        String
  description String?
  subject     String
  body        String
  type        String @default("email")
  variables   Json   @default("[]")
  usageCount  Int    @default(0)
  lastUsed    DateTime?
  isActive    Boolean @default(true)
  createdBy   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([orgId])
}

model ContactList {
  id          String @id @default(cuid())
  orgId       String
  org         Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  name        String
  description String?
  type        String // "manual", "pipeline", "tag_based", "dynamic"
  
  // Pipeline lists
  eventId     String?
  audienceType String?
  stages      String[]
  
  // Tag-based lists
  tagFilters  Json? // Complex tag filtering criteria
  
  // Dynamic lists
  filters     Json? // Complex filtering criteria
  
  // Stats
  totalContacts Int      @default(0)
  lastUpdated   DateTime @default(now())
  usageCount    Int      @default(0)
  lastUsed      DateTime?
  isActive      Boolean  @default(true)
  createdBy     String?
  tags          String[]
  
  // Relations
  members ContactListMember[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([orgId, name])
  @@index([orgId])
}

model ContactListMember {
  id            String @id @default(cuid())
  contactListId String
  contactList   ContactList @relation(fields: [contactListId], references: [id], onDelete: Cascade)
  
  // Can link to either OrgMember OR Supporter OR Prospect
  orgMemberId   String?
  orgMember     OrgMember? @relation(fields: [orgMemberId], references: [id], onDelete: Cascade)
  prospectId    String?
  prospect      FamilyProspect? @relation(fields: [prospectId], references: [id], onDelete: Cascade)
  
  addedAt DateTime @default(now())
  
  @@index([contactListId])
  @@index([orgMemberId])
  @@index([prospectId])
}

// EventLocation - BREADCRUMB for future venue reuse feature
// For MVP 1: Use Event.eventVenueName, eventStreet, etc. directly

model EventTask {
  id          String @id @default(cuid())
  eventId     String
  event       Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  // Task Details
  title       String
  description String?
  category    String // "design", "marketing", "tech", "logistics", "finance"
  completed   Boolean @default(false)
  dueDate     DateTime?
  
  // Assignment
  assignedTo  String? // Future: link to team member
  priority    String @default("medium") // "low", "medium", "high"
  
  // Order
  orderIndex  Int @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([eventId])
  @@index([eventId, completed])
}

// REMOVED: Stage and PipelineStage models - Stages are now hardcoded strings in EventAttendee.currentStage
// Possible stages: "in_funnel", "general_awareness", "personal_invite", "expressed_interest", "soft_commit", "paid"
